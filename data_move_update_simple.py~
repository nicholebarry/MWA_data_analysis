#!/usr/bin/python

import glob,os
from astropy.time import Time
from astropy.io import fits
import psycopg2
import sys
import socket
from optparse import OptionParser
import subprocess
import datetime
import time
import zipfile
import numpy as np
import shutil
import ntpath

#********************************
#Script that moves old uvfits, metafits, and qs files from locations on the MIT cluster
#to places that people are not utilizing while updating a few necessary stats along 
#the way.

#Script written by Nichole Barry, May 2017.

def main():

	#Assume cotter version is the same for files in eor-14 batch folder, and version, subversion
	version=5
	subversion=1
	old_path = '/nfs/mwa-10/r1/EoRuvfits/jd2456905v5_1/'
	old_path2 = '/nfs/eor-10/r1/EoRuvfits/jd2456905v5_1/'
	#folder_name = 'jd2456532v4_1'

	all_nodes = ["eor-03", "eor-04","eor-05","eor-06", "eor-07", "eor-08", "eor-11"]#, "eor-12"]#, "eor-13", "eor-14"]
	all_nodes = ["/nfs/" + nodename + "/r1/" for nodename in all_nodes]

	#Get obsids to download
	#obsfile_name='/nfs/mwa-00/h1/nbarry/MWA/IDL_code/obs_list/move_list.txt'
	#obsfile = open(obsfile_name, "r")
	#obsids = [line.split( ) for line in obsfile.readlines()]
	#obsids = [obs[0] for obs in obsids]
	#obsfile.close()
	#nonredundant_obsids = list(set(obsids))
	#if len(obsids) != len(nonredundant_obsids):
	#	print "WARNING: Obs list contains redundant entries."
	#	obsids = nonredundant_obsids

	obsids_path = glob.glob(old_path + '*')
	obsids = [ os.path.splitext(os.path.basename(obs))[0] for obs in obsids_path]

	#Find the obsids' save directory names
	t = Time([int(obsid) for obsid in obsids], format="gps", scale="utc")
	jds = t.jd
	jds = [int(jd) for jd in jds]
	save_directories = ["EoRuvfits/jd" + str(jd) + "v"+ str(version) + "_" + str(subversion) + "/" for jd in jds]

	#Connect to the database on eor-00 using the mwa username.
	try:
		conn = psycopg2.connect(database='mwa_qc',user='mwa',password='BowTie',host='eor-00.mit.edu')
	except:
		print 'Could not connect to mwa database.'
		sys.exit(1)

	#Module only works on the MIT cluster.
	if not 'mit.edu' in socket.gethostname():
		print 'Sorry, this script is currently only supported on eor-xx.mit.edu machines.'
		sys.exit(1)  
		
	cur = conn.cursor()

	for obsid in obsids:

		obs_index = obsids.index(obsid)

		save_path = all_nodes[1] + save_directories[obs_index] + obsid #put approximately 500 obsids on specified node if following test turns up false
		for loc_node in all_nodes:
			loc_path = loc_node + save_directories[obs_index]
			if os.path.isdir(loc_path): #checks to see if the directory exists
				save_path = loc_path + obsid
		#test!!
		print save_path

    		if not os.path.exists(save_path):
        		os.makedirs(save_path)
		new_path = save_path + "/" + obsid + ".uvfits"
		shutil.move(old_path + obsid + '/' + obsid + ".uvfits", new_path)
		shutil.move(old_path + obsid + '/' +obsid + ".metafits", save_path + "/" + obsid + ".metafits")
		#shutil.move(old_path +  obsid + '/' +obsid + ".qs", save_path + "/" + obsid + ".qs")

		#print new_path + ', ' + cotter_version + ', ' + bottom_freq_mhz + ', ' + top_freq_mhz
		#print "/nfs/mwa-14/r1/EoRuvfits/batch/" + obsid + ".uvfits" + ', ' + obsid

		#Create the database row, and fill it with the inputs. 
		cur.execute("UPDATE uvfits SET (path)=(%s) WHERE (path,obsid)=(%s,%s);", \
			(new_path,old_path + obsid + '/' + obsid + ".uvfits",obsid))
		cur.execute("UPDATE uvfits SET (path)=(%s) WHERE (path,obsid)=(%s,%s);", \
			(new_path,old_path2 + obsid + '/' + obsid + ".uvfits",obsid))
		conn.commit()

	#Commit all the cur.execute, and close the connection.
	conn.commit()
	cur.close()
	conn.close()

if __name__ == '__main__':
	main()
